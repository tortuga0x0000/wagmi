import { Document, ObjectId } from "mongodb";

export enum ORDER {
    ASC = 1,
    DSC = -1,
}

export enum SORTING {
  SHILL,
  LAST_MENTION,
  NAME
}

export enum ROUTE {
  token_list,
  info,
  reminders,
}

export enum COLLECTION_NAME {
  data = "data",
  reminders = "reminders"
}

export type NavParams = { page: number, sortBy: SORTING, order: ORDER }

/* eslint-disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

export interface DataDoc {
    /**
     * Unique token ticker for indexing
     */
    ticker: string;
    shillers: string[];
    /**
     * Array of message objects
     */
    messages: {
      /**
       * Must be a string and is required
       */
      url: string;
      /**
       * UTC date of the message. Required.
       */
      date: number;
      /**
       * Must be a string and is required
       */
      content: string;
      /**
       * Must be a string and is required
       */
      author: string;
      [k: string]: unknown;
    }[];
    [k: string]: unknown;
  }

export interface ReminderDoc {
  chatId: number
  /**
   * UTC
   */
  date: number
  ticker: string
  note?: string
}

export interface Call {
  author: string
  ticker: string
  reason: string
  entries: string[]
  sl: string
  targets: string[]
}

export enum CallConversationState {
  new,
  ticker,
  reason,
  type,
  entry,
  exit,
  stopLoss,
}

export enum CallType {
  long = "long",
  short = "short",
}

export type CallConversation =
| {
  step: CallConversationState.new
}
| {
  step: CallConversationState.ticker
  data: { ticker: string }
}
| {
  step: CallConversationState.reason
  data: { 
    ticker: string
    reason: string
  }
}
| {
  step: CallConversationState.type
  data: {
    ticker: string
    reason: string
    type: CallType | null
  }
}
| {
  step: CallConversationState.entry
  data: {
    ticker: string
    reason: string
    type: CallType | null
    entries: string[] | null
  }
}
| {
  step: CallConversationState.exit
  data: {
    ticker: string
    reason: string
    type: CallType | null
    entries: string[] | null
    targets: string[] | null
  }
}
| {
  step: CallConversationState.stopLoss
  data:{
    ticker: string
    reason: string
    type: CallType | null
    entries: string[] | null
    targets: string[] | null
    stopLoss: string
  }
}